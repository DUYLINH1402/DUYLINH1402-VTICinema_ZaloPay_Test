const express = require("express");
const router = express.Router();
const { db } = require("../firebase/firebaseConfig");

const CITY_SYNONYMS = {
  "TP.HCM": "H·ªì Ch√≠ Minh",
  HCM: "H·ªì Ch√≠ Minh",
  "S√†i G√≤n": "H·ªì Ch√≠ Minh",
  HN: "H√† N·ªôi",
  Hue: "Hu·∫ø",
  "Thua Thien Hue": "Hu·∫ø",
  "TT-Hu·∫ø": "Hu·∫ø",
  "TT Hu·∫ø": "Hu·∫ø",
};

// B·ªè d·∫•u ti·∫øng Vi·ªát
function normalizeText(text) {
  if (!text || typeof text !== "string") return "";
  return text
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .toLowerCase()
    .replace(/\s+/g, " ")
    .trim();
}

// chu·∫©n ho√° t√™n Th√†nh Ph·ªë
function normalizeCity(cityName) {
  const clean = cityName.trim().toLowerCase();
  const entry = Object.entries(CITY_SYNONYMS).find(([key]) => key.toLowerCase() === clean);
  return entry ? entry[1] : cityName;
}

// L·∫•y danh s√°ch r·∫°p theo th√†nh ph·ªë
async function getCinemasByCity(cityName) {
  const snapshot = await db.ref("Cinema").once("value");
  const data = snapshot.val();

  const targetCity = normalizeCity(cityName).toLowerCase();

  const cinemas = Object.values(data || {}).filter((cinema) => {
    return cinema.city && cinema.city.toLowerCase() === targetCity;
  });
  return cinemas.map((c) => c.cinema_name).join(", ");
}

// L·∫•y th√¥ng tin chi ti·∫øt r·∫°p
async function getCinemaDetailByName(name) {
  const snapshot = await db.ref("Cinema").once("value");
  const data = snapshot.val();
  const cinema = Object.values(data || {}).find((c) =>
    c.cinema_name.toLowerCase().includes(name.toLowerCase())
  );

  if (!cinema) return null;

  return `${cinema.cinema_name}\nüìç ƒê·ªãa ch·ªâ: ${cinema.location}\n üìû SƒêT: ${cinema.phone_number}\n üïó Gi·ªù m·ªü c·ª≠a: ${cinema.opening_hours}`;
}

// L·∫§Y DANH S√ÅCH KHUY·∫æN M√ÉI
async function getAllPromotions() {
  const snapshot = await db.ref("Promotions").once("value");
  const data = snapshot.val();

  if (!data) return "Hi·ªán t·∫°i ch∆∞a c√≥ khuy·∫øn m√£i n√†o.";

  let result = "üéÅ C√°c khuy·∫øn m√£i ƒëang √°p d·ª•ng:\n\n";

  Object.values(data).forEach((promo) => {
    result += `üî∏ ${promo.title}\n`;
    result += `üìÖ T·ª´ ${promo.startDate} ƒë·∫øn ${promo.endDate}\n`;
    result += `üìù ${promo.description}\n\n`;
  });

  return result.trim();
}

// L·∫•y th√¥ng tin phim theo t√™n
async function getMovieDetailByTitle(title) {
  console.log(">>> title from Dialogflow:", title);

  const snapshot = await db.ref("Movies").once("value");
  const data = snapshot.val();

  if (!data) return null;

  const input = normalizeText(title);

  const movie = Object.values(data).find((m) => normalizeText(m.movie_name) === input);

  if (!movie) return null;

  return `üé¨ ${movie.movie_name} (${movie.genre})\nüßë Di·ªÖn vi√™n: ${movie.actor}\nüéû ƒê·∫°o di·ªÖn: ${movie.director}\nüïê Th·ªùi l∆∞·ª£ng: ${movie.duration} ph√∫t\nüìÖ Kh·ªüi chi·∫øu: ${movie.release_date}\nüìå T√≥m t·∫Øt: ${movie.description}`;
}

// G·ª£i √Ω phim ƒëang chi·∫øu
async function getActiveMovies() {
  const snapshot = await db.ref("Movies").once("value");
  const data = snapshot.val();

  if (!data) return "Hi·ªán t·∫°i ch∆∞a c√≥ phim n√†o.";

  const activeMovies = Object.values(data).filter((m) => m.status?.toLowerCase() === "active");

  if (activeMovies.length === 0) return "Hi·ªán t·∫°i ch∆∞a c√≥ phim n√†o ƒëang chi·∫øu.";

  let result = "üé¨ C√°c phim ƒëang chi·∫øu h√¥m nay:\n\n";

  activeMovies.forEach((movie) => {
    result += `üîπ ${movie.movie_name} (${movie.genre})\n`;
  });

  return result.trim();
}

// L·∫•y danh s√°ch phim s·∫Øp chi·∫øu
async function getUpcomingMovies() {
  const snapshot = await db.ref("Movies").once("value");
  const data = snapshot.val();

  if (!data) return "Hi·ªán t·∫°i ch∆∞a c√≥ d·ªØ li·ªáu phim.";

  const upcoming = Object.values(data).filter(
    (movie) => movie.status?.toLowerCase() === "upcoming"
  );

  if (upcoming.length === 0) return "Hi·ªán t·∫°i ch∆∞a c√≥ phim n√†o s·∫Øp chi·∫øu.";

  let result = "üé¨ C√°c phim s·∫Øp chi·∫øu:\n\n";
  upcoming.forEach((movie) => {
    result += `üîπ ${movie.movie_name}`;
    if (movie.release_date) {
      result += ` (Kh·ªüi chi·∫øu: ${movie.release_date})`;
    }
    result += `\n`;
  });

  return result.trim();
}

// L·∫•y danh s√°ch phim ƒëang chi·∫øu theo th·ªÉ lo·∫°i
async function getMoviesByGenre(genreInput) {
  const snapshot = await db.ref("Movies").once("value");
  const data = snapshot.val();
  if (!data) return "Hi·ªán t·∫°i ch∆∞a c√≥ d·ªØ li·ªáu phim.";
  console.log(">>> genreInput:", genreInput);

  const target = normalizeText(genreInput);

  const matched = Object.values(data).filter((movie) => {
    if (!movie?.genre || movie.status?.toLowerCase() !== "active") return false;

    const genres = movie.genre.split(",").map((g) => normalizeText(g));
    return genres.includes(target);
  });

  if (matched.length === 0)
    return `Hi·ªán t·∫°i ch∆∞a c√≥ phim ƒëang chi·∫øu n√†o thu·ªôc th·ªÉ lo·∫°i ${genreInput}.`;

  let result = `üé¨ Phim th·ªÉ lo·∫°i "${genreInput}" ƒëang chi·∫øu:\n\n`;
  matched.forEach((movie) => {
    result += `üîπ ${movie.movie_name}\n`;
  });

  return result.trim();
}

//API CH√çNH
router.post("/", async (req, res) => {
  const { queryResult } = req.body || {};

  if (!queryResult || !queryResult.intent || !queryResult.parameters) {
    return res.status(400).json({ error: "Invalid Dialogflow webhook request" });
  }

  const intentName = queryResult.intent.displayName;
  const params = queryResult.parameters;
  let responseText = "";

  try {
    switch (intentName) {
      // Danh s√°ch r·∫°p theo th√†nh ph·ªë
      case "DanhSachRapTheoThanhPho":
        const city = params["thanhpho"];
        const list = await getCinemasByCity(city);
        responseText = list
          ? `üìç C√°c r·∫°p ·ªü ${city}: ${list}`
          : `M√¨nh kh√¥ng t√¨m th·∫•y r·∫°p n√†o ·ªü ${city}`;
        break;

      // Th√¥ng tin R·∫°p
      case "ThongTinRap":
        const name = params["tenrap"];
        const detail = await getCinemaDetailByName(name);
        responseText = detail || `Kh√¥ng t√¨m th·∫•y th√¥ng tin r·∫°p ${name}`;
        break;

      // Gi·ªù m·ªü c·ªßa r·∫°p
      case "GioMoCuaRap":
        const detailRap = await getCinemaDetailByName(params["tenrap"]);
        responseText = detailRap
          ? `${params["tenrap"]} m·ªü c·ª≠a l√∫c ${detailRap.match(/üïó Gi·ªù m·ªü c·ª≠a: (.+)/)?.[1]}`
          : `M√¨nh kh√¥ng t√¨m th·∫•y r·∫°p ${params["tenrap"]}`;
        break;

      // Khuy·∫øn m√£i
      case "KhuyenMai":
        responseText = await getAllPromotions();
        break;

      // Chi ti·∫øt phim
      case "ThongTinPhim":
        const movieName = params["movie_title"];
        const movieDetail = await getMovieDetailByTitle(movieName);
        responseText = movieDetail || `M√¨nh kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ phim ${movieName}.`;
        break;

      // G·ª£i √Ω phim ƒëang chi·∫øu
      case "PhimDangChieu":
        responseText = await getActiveMovies();
        break;
      // Phim s·∫Øp chi·∫øu
      case "PhimSapChieu":
        responseText = await getUpcomingMovies();
        break;

      // Phim ƒëang chi·∫øu theo th·ªÉ lo·∫°i
      case "PhimTheoTheLoai":
        const genre = params["genre"];
        responseText = await getMoviesByGenre(genre);
        break;

      default:
        responseText = "Xin l·ªói, m√¨nh ch∆∞a h·ªó tr·ª£ y√™u c·∫ßu n√†y.";
    }
  } catch (error) {
    console.error(" L·ªói webhook:", error);
    responseText = "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu.";
  }

  res.json({ fulfillmentText: responseText });
});

module.exports = router;
